#!/bin/bash

PKG_FILE="$DOTFILES/pkgs.txt"
PKG_ALL_FILE="$DOTFILES/pkgs-all.txt"
EXCLUDE_PATTERNS=(
    # PHP7 has to manually installed
    "php74*" 
    # Not always a amd machine
    "amd-ucode"
    # Will need paru to install, so no need to reinstall it self
    "paru*"
    # Well, my working machine should not have steam
    "steam"
    # If not dual boot windows with arch, no need
    "os-prober"
    # Working PC no need chinese keyboard
    "*rime*"
    "*fcitx5*"
    # No need all the browsers
    "chromium"
    "firefox"
    "chrome"
)

# Ensure paru is installed
function ensure_paru() {
    if ! command -v paru &> /dev/null; then
        echo "Paru is not installed. Installing paru..."
        sudo pacman -Sy --needed --noconfirm base-devel git
        tmpdir=$(mktemp -d)
        git clone https://aur.archlinux.org/paru.git "$tmpdir/paru"
        pushd "$tmpdir/paru" > /dev/null || exit 1
        makepkg -si --noconfirm
        popd > /dev/null
        rm -rf "$tmpdir"
        echo "Paru installed successally."
    else
        echo "Paru is already installed."
    fi
}

function save_packages() {
    echo "Saving explicitly installed packages..."
    local all_pkgs
    mapfile -t all_pkgs < <(pacman -Qqe)

    # Save complete package list
    printf "%s\n" "${all_pkgs[@]}" > "$PKG_ALL_FILE"
    echo "Saved $(wc -l < "$PKG_ALL_FILE") packages to $PKG_ALL_FILE (complete list)."

    # Save filtered package list
    local filtered_pkgs=()
    for pkg in "${all_pkgs[@]}"; do
        local skip=false
        for pattern in "${EXCLUDE_PATTERNS[@]}"; do
            if [[ $pkg == $pattern ]]; then
                echo "Excluding package: $pkg"
                skip=true
                break
            fi
        done
        if ! $skip; then
            filtered_pkgs+=("$pkg")
        fi
    done
    printf "%s\n" "${filtered_pkgs[@]}" > "$PKG_FILE"
    echo "Saved $(wc -l < "$PKG_FILE") packages to $PKG_FILE (filtered list, excludes: ${EXCLUDE_PATTERNS[*]})."
}

function install_packages() {
    local use_all=false
    local target_file="$PKG_FILE"

    # Parse the all flag
    if [[ "$1" == "--all" ]]; then
        use_all=true
        target_file="$PKG_ALL_FILE"
    fi

    if [[ ! -f "$target_file" ]]; then
        echo "Error: $target_file not found. Please run with 'save' first."
        exit 1
    fi

    ensure_paru

    if $use_all; then
        echo "Installing ALL packages from $target_file using paru..."
    else
        echo "Installing filtered packages from $target_file using paru..."
    fi

    paru -S --needed --noconfirm $(< "$target_file")
    echo "Packages installed successally."
}

function usage() {
    echo "Usage: $0 {save|install [--all]}"
    echo "  save           - Save packages to both $PKG_FILE (filtered) and $PKG_ALL_FILE (complete)"
    echo "  install        - Install filtered packages from $PKG_FILE using paru"
    echo "  install --all - Install all packages from $PKG_ALL_FILE using paru"
    echo ""
    echo "The script automatically installs paru if needed during install operations."
}

# Main
case "$1" in
    save)
        save_packages
        ;;
    install)
        install_packages "$2"
        ;;
    *)
        usage
        exit 1
        ;;
esac
